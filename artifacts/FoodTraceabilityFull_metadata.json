{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "badgeName",
						"type": "string"
					}
				],
				"name": "BadgeAwarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "temperature",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "notes",
						"type": "string"
					}
				],
				"name": "IoTDataCaptured",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "origin",
						"type": "string"
					}
				],
				"name": "ProductRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "qrToken",
						"type": "string"
					}
				],
				"name": "QRGenerated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum FoodTraceabilityFull.Role",
						"name": "role",
						"type": "uint8"
					}
				],
				"name": "RoleAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "enum FoodTraceabilityFull.Stage",
						"name": "stage",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "handler",
						"type": "address"
					}
				],
				"name": "StageUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "minTemp",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "maxTemp",
						"type": "int256"
					}
				],
				"name": "ThresholdsSet",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "enum FoodTraceabilityFull.Role",
						"name": "role",
						"type": "uint8"
					}
				],
				"name": "assignRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "badgeName",
						"type": "string"
					}
				],
				"name": "awardBadge",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "int256",
						"name": "temperature",
						"type": "int256"
					},
					{
						"internalType": "string",
						"name": "handlingNotes",
						"type": "string"
					}
				],
				"name": "captureIoTData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "checkTemperatureCompliance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "consumerLookupByLot",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "origin",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "certifications",
						"type": "string"
					},
					{
						"internalType": "enum FoodTraceabilityFull.Stage",
						"name": "stage",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "handler",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "latestQR",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "qrToken",
						"type": "string"
					}
				],
				"name": "consumerLookupByQR",
				"outputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "origin",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "certifications",
						"type": "string"
					},
					{
						"internalType": "enum FoodTraceabilityFull.Stage",
						"name": "stage",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "handler",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "generateQRToken",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "getAnalytics",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalLogs",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "avgTemp",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "minTemp",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "maxTemp",
						"type": "int256"
					},
					{
						"internalType": "bool",
						"name": "compliant",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "getBadges",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					}
				],
				"name": "getIoTLogs",
				"outputs": [
					{
						"internalType": "int256[]",
						"name": "temps",
						"type": "int256[]"
					},
					{
						"internalType": "string[]",
						"name": "notes",
						"type": "string[]"
					},
					{
						"internalType": "uint256[]",
						"name": "timestamps",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "badgeName",
						"type": "string"
					}
				],
				"name": "hasBadge",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "origin",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "certifications",
						"type": "string"
					}
				],
				"name": "registerProduct",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "roles",
				"outputs": [
					{
						"internalType": "enum FoodTraceabilityFull.Role",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "int256",
						"name": "minTemp",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "maxTemp",
						"type": "int256"
					}
				],
				"name": "setTemperatureThresholds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "enum FoodTraceabilityFull.Stage",
						"name": "newStage",
						"type": "uint8"
					}
				],
				"name": "updateStage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"title": "FoodTraceabilityFull",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"awardBadge(string,string)": {
					"notice": "Owner or product handler can manually award a badge"
				},
				"checkTemperatureCompliance(string)": {
					"notice": "Check if product's transport logs are within thresholds (returns true if compliant or no thresholds set)"
				},
				"consumerLookupByLot(string)": {
					"notice": "Consumer lookup by lotNumber (direct)"
				},
				"consumerLookupByQR(string)": {
					"notice": "Consumer lookup by QR token (simulate scanning)"
				},
				"getAnalytics(string)": {
					"notice": "Analytics summary: totalLogs, avgTemp (scaled), minTemp, maxTemp, compliant Note: avgTemp returned as int256 (floor) using integer division"
				},
				"getBadges(string)": {
					"notice": "View badges for a lot"
				},
				"registerProduct(string,string,string,string)": {
					"notice": "Register a new product (anyone can register in this demo; in production restrict to trusted accounts)"
				},
				"setTemperatureThresholds(string,int256,int256)": {
					"notice": "Owner or designated role can set temperature thresholds for a lot (optional)"
				},
				"updateStage(string,uint8)": {
					"notice": "Update stage — must move forward (Created -> Vendor -> Manufacturing -> Logistics -> Retail -> Completed) Only the address with the appropriate role should call updateStage for that stage (enforced)."
				}
			},
			"notice": "End-to-end frozen food traceability with QR simulation and gamification badges. How to use in Remix: 1. Create `FoodTraceabilityFull.sol` and paste this code. 2. Compile with Solidity 0.8.20. 3. Deploy (account deploying becomes owner). 4. Use owner-only functions to assign roles, register products, and optionally set thresholds. 5. Use role accounts to update stages/capture IoT logs. 6. Use generateQR to create a QR token; consumer can call consumerLookupByQR(token).",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"FoodTraceability.sol": "FoodTraceabilityFull"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"FoodTraceability.sol": {
			"keccak256": "0x5b15ee1d3bbe68f9b5392c9ae9264bdad9c2e2812fcb1dcce3ea5f7c41aea2f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8e38ee1d4566ac9dbc2ae23b237661335c041c08431e8669143423e7a2396f5",
				"dweb:/ipfs/QmYBp2ugqJdT1MB4qCDYCJVLZ5qbYzVGN5v6gXBXK8hSoC"
			]
		}
	},
	"version": 1
}